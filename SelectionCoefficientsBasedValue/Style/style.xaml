<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SelectionCoefficientsBasedValue.VisualHelpers"
                    xmlns:i="clr-namespace:SelectionCoefficientsBasedValue.All">
    <!--<local:WarnReaderTextBlockWidthConverter x:Key="WidthConvertor"/>-->
    <!--#region Convertors-->
    <!--<local:WarnReaderTextBlockWidthConverter x:Key="WidthConvertor" />
    <local:Converters x:Key="LineConverter" />
    <local:HalfDoubleConvertor x:Key="HalfValue" />-->
    <!--#endregion-->

    <!--#region ComboBox -->
    <SolidColorBrush x:Key="ComboBox.Static.Background"
                     Color="#FFFFFF" />
    <SolidColorBrush x:Key="Static.Background.ComboBox"
                     Color="White" />
    <SolidColorBrush x:Key="Static.Border"
                     Color="#FFE6E8E6" />
    <SolidColorBrush x:Key="MouseOver.Background"
                     Color="#FFFFFF" />
    <SolidColorBrush x:Key="MouseOver.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="MouseOver.Glyph"
                     Color="#FF212121" />
    <SolidColorBrush x:Key="Disabled.Background"
                     Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="Disabled.Border"
                     Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="Disabled.Glyph"
                     Color="#FF707070" />
    <SolidColorBrush x:Key="Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="Pressed.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="Pressed.Glyph"
                     Color="#FF212121" />
    <SolidColorBrush x:Key="Static.Glyph"
                     Color="#FF333040" />
    <ControlTemplate x:Key="ComboBoxToggleButton"
                     TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    Grid.ColumnSpan="2"
                    CornerRadius="5"
                    Background="{TemplateBinding Background}"
                    BorderBrush="#FFE6E8E6"
                    BorderThickness="2" />
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  Fill="Black"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Data="F1 M 0,0 L 0,0 L 11,0 L 5.5,8 Z" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver"
                     Value="true">
                <Setter TargetName="Border"
                        Property="BorderBrush"
                        Value="#FFD1D1D1" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked"
                     Value="true">
                <Setter TargetName="Border"
                        Property="BorderBrush"
                        Value="#FFFFAD97" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter TargetName="Border"
                        Property="BorderBrush"
                        Value="#FFD1D1D1" />
                <Setter TargetName="Arrow"
                        Property="Fill"
                        Value="#FFD1D1D1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox"
                     TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost"
                Focusable="False"
                Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <Style x:Key="{x:Type ComboBox}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Background"
                Value="{StaticResource ComboBox.Static.Background}" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="MinHeight"
                Value="16" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton Name="ToggleButton"
                                      Template="{StaticResource ComboBoxToggleButton}"
                                      Grid.Column="2"
                                      Background="{TemplateBinding Background}"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press"></ToggleButton>
                        <ContentPresenter Name="ContentSite"
                                          IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="10,3,23,3"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}"
                                 Template="{StaticResource ComboBoxTextBox}"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Margin="3,3,23,3"
                                 Focusable="True"
                                 Background="Black"
                                 Foreground="Black"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="#FFFFFF"
                                        BorderThickness="2"
                                        BorderBrush="#FFE6E8E6" />
                                <ScrollViewer Margin="6,6,6,6"
                                              SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="DropDownBorder"
                                    Property="MinHeight"
                                    Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="LightGray" />
                        </Trigger>
                        <Trigger Property="IsGrouping"
                                 Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"
                                    Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup"
                                 Property="Popup.AllowsTransparency"
                                 Value="true">
                            <Setter TargetName="DropDownBorder"
                                    Property="CornerRadius"
                                    Value="5" />
                            <Setter TargetName="DropDownBorder"
                                    Property="Margin"
                                    Value="0,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter Property="IsTabStop"
                                    Value="false" />
                            <Setter TargetName="PART_EditableTextBox"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="ContentSite"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                            Padding="4"
                            Margin="0"
                            CornerRadius="5"
                            SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="#FFD1D1D1" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="#FFD1D1D1" />
                            <Setter Property="Margin"
                                    Value="0,0,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region TreeViewLineStyle-->
    <!-- Toggle Button -->
    <!--<Style x:Key="ExpandCollapseToggleStyle"
           TargetType="ToggleButton">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15"
                          Height="13"
                          SnapsToDevicePixels="True">
                        <Rectangle Width="9"
                                   Height="9"
                                   Stroke="#919191"
                                   SnapsToDevicePixels="true">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,2"
                                                     StartPoint="0.5,0">
                                    <GradientStop Color="White"
                                                  Offset="0" />
                                    <GradientStop Color="Silver"
                                                  Offset="0.5" />
                                    <GradientStop Color="LightGray"
                                                  Offset="1" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="ExpandPath"
                                   Width="1"
                                   Height="5"
                                   Stroke="Black"
                                   SnapsToDevicePixels="true" />
                        <Rectangle Width="5"
                                   Height="1"
                                   Stroke="Black"
                                   SnapsToDevicePixels="true" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter Property="Visibility"
                                    TargetName="ExpandPath"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!-- TreeViewItem -->

    <Style x:Key="OldTreeViewWithLines"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="1,0,0,0" />
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                                              Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!--Connecting Lines-->

                        <Rectangle x:Name="HorLn"
                                   Margin="9,1,0,0"
                                   Height="1"
                                   Stroke="DarkGray"
                                   StrokeDashCap="Square"
                                   StrokeDashArray="0,2"
                                   StrokeDashOffset="1"
                                   SnapsToDevicePixels="True" />
                        <Rectangle x:Name="VerLn"
                                   Width="1"
                                   Stroke="DarkGray"
                                   StrokeDashCap="Square"
                                   StrokeDashArray="0,2"
                                   Margin="0,0,1,0"
                                   Grid.RowSpan="2"
                                   SnapsToDevicePixels="true"
                                   Fill="White" />
                        <ToggleButton Margin="-1,0,0,0"
                                      x:Name="Expander"
                                      Style="{StaticResource ExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press" />
                        <Border Name="Bd"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              MinWidth="20" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--This trigger changes the connecting lines if the item is the last in the list-->

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}"
                                     Value="true">
                            <Setter TargetName="VerLn"
                                    Property="Height"
                                    Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource HalfValue}}" />
                            <Setter TargetName="VerLn"
                                    Property="VerticalAlignment"
                                    Value="Top" />

                        </DataTrigger>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Width"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinWidth"
                                    Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Height"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinHeight"
                                    Value="19" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="Green" />
                            <Setter Property="Foreground"
                                    Value="White" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region TreeView -->
    <!--Control colors.-->
    <!--
    <Color
        x:Key="WindowColor">#FFE8EDF9</Color>
    <Color
        x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color
        x:Key="ContentAreaColorDark">#FF7381F9</Color>
    <Color
        x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color
        x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color
        x:Key="DisabledForegroundColor">#FF888888</Color>
    <Color
        x:Key="SelectedBackgroundColor">#FFFFFFFF</Color>
    <Color
        x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
    <Color
        x:Key="ControlLightColor">White</Color>
    <Color
        x:Key="ControlMediumColor">#FFFFFFFF</Color>
    <Color
        x:Key="ControlDarkColor">#FFFFFFFF</Color>
    <Color
        x:Key="ControlMouseOverColor">#FFFFFFFF</Color>
    <Color
        x:Key="ControlPressedColor">#FFFFFFFF</Color>
    <Color
        x:Key="GlyphColor">#FF444444</Color>
    <Color
        x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>
    -->
    <!--Border colors-->
    <!--
    <Color
        x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color
        x:Key="BorderMediumColor">#FF888888</Color>
    <Color
        x:Key="BorderDarkColor">#FF444444</Color>
    <Color
        x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color
        x:Key="PressedBorderDarkColor">#FF444444</Color>
    <Color
        x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color
        x:Key="DisabledBorderDarkColor">#FF888888</Color>
    <Color
        x:Key="DefaultBorderBrushDarkColor">Black</Color>
    -->
    <!--Control-specific resources.-->
    <!--
    <Color
        x:Key="HeaderTopColor">#FFFFFFFF</Color>
    <Color
        x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color
        x:Key="SliderTrackDarkColor">#FFFFFFFF</Color>
    <Color
        x:Key="NavButtonFrameColor">#FFFFFFFF</Color>
    <LinearGradientBrush
        x:Key="MenuPopupBrush"
        EndPoint="0.5,1"
        StartPoint="0.5,0">
        <GradientStop
            Color="{DynamicResource ControlLightColor}"
            Offset="0" />
        <GradientStop
            Color="{DynamicResource ControlMediumColor}"
            Offset="0.5" />
        <GradientStop
            Color="{DynamicResource ControlLightColor}"
            Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush
        x:Key="ProgressBarIndicatorAnimatedFill"
        StartPoint="0,0"
        EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop
                    Color="#000000FF"
                    Offset="0" />
                <GradientStop
                    Color="#600000FF"
                    Offset="0.4" />
                <GradientStop
                    Color="#600000FF"
                    Offset="0.6" />
                <GradientStop
                    Color="#000000FF"
                    Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style
        x:Key="{x:Type TreeView}"
        TargetType="TreeView">
        <Setter
            Property="OverridesDefaultStyle"
            Value="True" />
        <Setter
            Property="SnapsToDevicePixels"
            Value="True" />
        <Setter
            Property="ScrollViewer.HorizontalScrollBarVisibility"
            Value="Auto" />
        <Setter
            Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="Auto" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="TreeView">
                    <Border
                        Name="Border"
                        Margin="0"
                        CornerRadius="1"
                        BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush
                                Color="{DynamicResource BorderMediumColor}" />
                        </Border.BorderBrush>
                        <Border.Background>
                            <SolidColorBrush
                                Color="{DynamicResource ControlLightColor}" />
                        </Border.Background>
                        <ScrollViewer
                            Focusable="False"
                            CanContentScroll="False"
                            Padding="4">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="ExpandCollapseToggleStyle"
        TargetType="ToggleButton">
        <Setter
            Property="Focusable"
            Value="False" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="ToggleButton">
                    <Grid
                        Width="15"
                        Height="13"
                        Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup
                                x:Name="CheckStates">
                                <VisualState
                                    x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.Visibility)"
                                            Storyboard.TargetName="Collapsed">
                                            <DiscreteObjectKeyFrame
                                                KeyTime="0"
                                                Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.Visibility)"
                                            Storyboard.TargetName="Expanded">
                                            <DiscreteObjectKeyFrame
                                                KeyTime="0"
                                                Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState
                                    x:Name="Unchecked" />
                                <VisualState
                                    x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path
                            x:Name="Collapsed"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="3,0,0,0"
                            Data="M 4 0 L 8 4 L 4 8 Z">
                            <Path.Fill>
                                <SolidColorBrush
                                    Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                        <Path
                            x:Name="Expanded"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="5,-3,0,0"
                            Data="M 0 4 L 8 4 L 4 8 Z"
                            Visibility="Hidden">
                            <Path.Fill>
                                <SolidColorBrush
                                    Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="TreeViewItemFocusVisual">
        <Setter
            Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="0,0,0,0"
                            StrokeThickness="5"
                            Stroke="Black"
                            StrokeDashArray="1 2"
                            Opacity="0" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="{x:Type TreeViewItem}"
        TargetType="{x:Type TreeViewItem}">
        <Setter
            Property="Background"
            Value="Transparent" />
        <Setter
            Property="HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter
            Property="VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter
            Property="Padding"
            Value="1,0,0,0" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter
            Property="FocusVisualStyle"
            Value="{StaticResource TreeViewItemFocusVisual}" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type TreeViewItem}">
                    <Grid
                        Margin="0,0,0,2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition
                                MinWidth="20"
                                Width="Auto" />
                            <ColumnDefinition
                                Width="Auto" />
                            <ColumnDefinition
                                Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition
                                Height="20" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup
                                x:Name="SelectionStates">
                                <VisualState
                                    x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames
                                            Storyboard.TargetName="Bd"
                                            Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame
                                                KeyTime="0"
                                                Value="{StaticResource SelectedBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState
                                    x:Name="Unselected" />
                                <VisualState
                                    x:Name="SelectedInactive">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames
                                            Storyboard.TargetName="Bd"
                                            Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame
                                                KeyTime="0"
                                                Value="{StaticResource SelectedUnfocusedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup
                                x:Name="ExpansionStates">
                                <VisualState
                                    x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.Visibility)"
                                            Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame
                                                KeyTime="0"
                                                Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState
                                    x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton
                            x:Name="Expander"
                            Style="{StaticResource ExpandCollapseToggleStyle}"
                            ClickMode="Press"
                            IsChecked="{Binding IsExpanded, 
            RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border
                            x:Name="Bd"
                            Grid.Column="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                            <ContentPresenter
                                x:Name="PART_Header"
                                ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Border>
                        <ItemsPresenter
                            x:Name="ItemsHost"
                            Grid.Row="1"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="HasItems"
                            Value="false">
                            <Setter
                                TargetName="Expander"
                                Property="Visibility"
                                Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="HasHeader"
                                    Value="false" />
                                <Condition
                                    Property="Width"
                                    Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter
                                TargetName="PART_Header"
                                Property="MinWidth"
                                Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="HasHeader"
                                    Value="false" />
                                <Condition
                                    Property="Height"
                                    Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter
                                TargetName="PART_Header"
                                Property="MinHeight"
                                Value="19" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    -->
    <!--#endregion-->
    
    <!--#region test-->
    <!--<i:TreeViewLineConverter x:Key="LineConverter" />
    <i:MultiplyValueConverter x:Key="MultiplyConverter" />-->

    <!-- Toggle Button -->
    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="ToggleButton">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="20"
                          Height="20"
                          SnapsToDevicePixels="True">
                        <Rectangle Width="14"
                                   Height="14"
                                   RadiusX="3"
                                   RadiusY="3"
                                   SnapsToDevicePixels="true">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="#FFE6E8E6" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="ExpandPath"
                                   Width="1"
                                   Height="7"
                                   Stroke="Black"
                                   SnapsToDevicePixels="true" />
                        <Rectangle Width="7"
                                   Height="1"
                                   Stroke="Black"
                                   SnapsToDevicePixels="true" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter Property="Visibility"
                                    TargetName="ExpandPath"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TreeViewItem -->
    <Style x:Key="{x:Type TreeViewItem}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="5,0,5,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                                              Width="Auto" />
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!-- Connecting Lines -->
                        <Rectangle x:Name="HorLn"
                                   Margin="9,0,0,0"
                                   Height="2"
                                   Stroke="#FFE6E8E6"
                                   SnapsToDevicePixels="True" />
                        <Rectangle x:Name="VerLn"
                                   Width="2"
                                   Stroke="#FFE6E8E6"
                                   Margin="0,0,0,-2"
                                   Grid.RowSpan="2"
                                   SnapsToDevicePixels="true"
                                   Fill="White" />
                        <ToggleButton Margin="0,0,0,0"
                                      x:Name="Expander"
                                      Style="{StaticResource ExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press" />
                        <Border Name="Bd"
                                Grid.Column="1"
                                CornerRadius="5"
                                Margin="0,1,0,1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              MinWidth="26" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}"
                                     Value="true">
                            <Setter TargetName="VerLn"
                                    Property="Height"
                                    Value="{Binding ElementName=Bd, Path=ActualHeight, Converter={StaticResource MultiplyConverter}, ConverterParameter=0.5}" />
                            <Setter TargetName="VerLn"
                                    Property="VerticalAlignment"
                                    Value="Top" />
                        </DataTrigger>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Width"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinWidth"
                                    Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Height"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinHeight"
                                    Value="19" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="Transparent" />
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="Transparent" />
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TreeViewItem -->
    <Style x:Key="TreeViewItemSelectON"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="5,0,5,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                                              Width="Auto" />
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!-- Connecting Lines -->
                        <Rectangle x:Name="HorLn"
                                   Margin="9,0,0,0"
                                   Height="2"
                                   Stroke="#FFE6E8E6"
                                   SnapsToDevicePixels="True" />
                        <Rectangle x:Name="VerLn"
                                   Width="2"
                                   Stroke="#FFE6E8E6"
                                   Margin="0,0,0,-2"
                                   Grid.RowSpan="2"
                                   SnapsToDevicePixels="true"
                                   Fill="White" />
                        <ToggleButton Margin="0,0,0,0"
                                      x:Name="Expander"
                                      Style="{StaticResource ExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press" />
                        <Border Name="Bd"
                                Grid.Column="1"
                                CornerRadius="5"
                                Margin="0,1,0,1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              MinWidth="26" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}"
                                     Value="true">
                            <Setter TargetName="VerLn"
                                    Property="Height"
                                    Value="{Binding ElementName=Bd, Path=ActualHeight, Converter={StaticResource MultiplyConverter}, ConverterParameter=0.5}" />
                            <Setter TargetName="VerLn"
                                    Property="VerticalAlignment"
                                    Value="Top" />
                        </DataTrigger>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Width"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinWidth"
                                    Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Height"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinHeight"
                                    Value="19" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="#FFFFAD97" />
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="#E6E8E6" />
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
    
    
    
    <!--#region CheckBox-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="OptionMark.Static.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="OptionMark.Static.Border"
                     Color="#FFE6E8E6" />
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="OptionMark.MouseOver.Background"
                     Color="WhiteSmoke" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph"
                     Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Background"
                     Color="#FFECECEC" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph"
                     Color="Gray" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph"
                     Color="#FF858585" />
    <SolidColorBrush x:Key="OptionMark.Static.Glyph"
                     Color="#FF212121" />
    <Style x:Key="CheckBoxStyleDVPINotToggleButton"
           TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource OptionMark.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource OptionMark.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot"
                          Background="Transparent"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="1"
                                CornerRadius="5"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark"
                                      Data="F1 M 0,5 L 4,10 L 10,2.5 L 10,0 L 4,7.5 L2,5"
                                      Height="12"
                                      Width="12"
                                      Stretch="Fill"
                                      Fill="{StaticResource OptionMark.Static.Glyph}"
                                      Margin="1"
                                      Opacity="0" />
                                <Rectangle x:Name="indeterminateMark"
                                           Fill="{StaticResource OptionMark.Static.Glyph}"
                                           Margin="3"
                                           Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent"
                                 Value="true">
                            <Setter Property="FocusVisualStyle"
                                    Value="{StaticResource OptionMarkFocusVisual}" />
                            <Setter Property="Padding"
                                    Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.MouseOver.Border}" />
                            <Setter Property="Fill"
                                    TargetName="optionMark"
                                    Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                            <Setter Property="Fill"
                                    TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Disabled.Border}" />
                            <Setter Property="Fill"
                                    TargetName="optionMark"
                                    Value="{StaticResource OptionMark.Disabled.Glyph}" />
                            <Setter Property="Fill"
                                    TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Pressed.Border}" />
                            <Setter Property="Fill"
                                    TargetName="optionMark"
                                    Value="{StaticResource OptionMark.Pressed.Glyph}" />
                            <Setter Property="Fill"
                                    TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Opacity"
                                    TargetName="optionMark"
                                    Value="1" />
                            <Setter Property="Opacity"
                                    TargetName="indeterminateMark"
                                    Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="{x:Null}">
                            <Setter Property="Opacity"
                                    TargetName="optionMark"
                                    Value="0" />
                            <Setter Property="Opacity"
                                    TargetName="indeterminateMark"
                                    Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region General-->
    <!--<Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
    </Style>-->

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
    </Style>
    <!--#endregion-->

    <!--#region ButtonNormal -->
    <SolidColorBrush x:Key="Button.Static.Background"
                     Color="#FFE6E8E6" />
    <SolidColorBrush x:Key="Button.MouseOver.Background"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="Button.Static.Border"
                     Color="#FFE6E8E6" />
    <SolidColorBrush x:Key="Button.MouseOver.Border"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="Button.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="Button.Pressed.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="Button.Disabled.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Disabled.Border"
                     Color="#7F2B3541" />
    <SolidColorBrush x:Key="Button.Disabled.Foreground"
                     Color="Gray" />
    <SolidColorBrush x:Key="Button.Foreground"
                     Color="White" />
    <Style x:Key="NormalButtons"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource Button.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Static.Border}" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="2" />
                            <Setter Property="Cursor"
                                    TargetName="border"
                                    Value="No" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ButtonNormallist -->

    <Style x:Key="ButtonNormallist"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource Button.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Static.Border}" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            Margin="4,0"
                            x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="0" />
                            <Setter Property="Cursor"
                                    TargetName="border"
                                    Value="No" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ButtonClose -->
    <SolidColorBrush x:Key="ButtonClose.Static.Background"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonClose.MouseOver.Background"
                     Color="Red" />
    <SolidColorBrush x:Key="ButtonClose.Static.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonClose.MouseOver.Border"
                     Color="Red" />
    <SolidColorBrush x:Key="ButtonClose.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonClose.Pressed.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonClose.Disabled.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="ButtonClose.Disabled.Border"
                     Color="#7F2B3541" />
    <SolidColorBrush x:Key="ButtonClose.Disabled.Foreground"
                     Color="Gray" />
    <SolidColorBrush x:Key="ButtonClose.Foreground"
                     Color="White" />
    <Style x:Key="ButtonClose"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource ButtonClose.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ButtonClose.Static.Border}" />
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="0,10,0,10"
                            x:Name="border"
                            Padding="0,0,0,2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="0" />
                            <Setter Property="Cursor"
                                    TargetName="border"
                                    Value="No" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ButtonClose.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ButtonCloseNoRadius -->
    <Style x:Key="ButtonCloseNoRadius"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource ButtonClose.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ButtonClose.Static.Border}" />
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="0,10,0,0"
                            x:Name="border"
                            Padding="0,0,0,2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonClose.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="0" />
                            <Setter Property="Cursor"
                                    TargetName="border"
                                    Value="No" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ButtonClose.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ButtonMax -->
    <SolidColorBrush x:Key="ButtonMax.Static.Background"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMax.MouseOver.Background"
                     Color="#FF0961D6" />
    <SolidColorBrush x:Key="ButtonMax.Static.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMax.MouseOver.Border"
                     Color="#FF0961D6" />
    <SolidColorBrush x:Key="ButtonMax.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonMax.Pressed.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonMax.Disabled.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="ButtonMax.Disabled.Border"
                     Color="#7F2B3541" />
    <SolidColorBrush x:Key="ButtonMax.Disabled.Foreground"
                     Color="Gray" />
    <SolidColorBrush x:Key="ButtonMax.Foreground"
                     Color="White" />
    <Style x:Key="ButtonMax"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource ButtonMax.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ButtonMax.Static.Border}" />
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="0,0,0,10"
                            x:Name="border"
                            Padding="0,0,0,3"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMax.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMax.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMax.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMax.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMax.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMax.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="0" />
                            <Setter Property="Cursor"
                                    TargetName="border"
                                    Value="No" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ButtonMax.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ButtonNormalVisited -->
    <SolidColorBrush x:Key="ButtonNormalVisited.Static.Background"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="ButtonNormalVisited.MouseOver.Background"
                     Color="#FFB4B4B4" />
    <SolidColorBrush x:Key="ButtonNormalVisited.Static.Border"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="ButtonNormalVisited.MouseOver.Border"
                     Color="#FFB4B4B4" />
    <SolidColorBrush x:Key="ButtonNormalVisited.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonNormalVisited.Pressed.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonNormalVisited.Disabled.Background"
                     Color="#FFECECEC" />
    <SolidColorBrush x:Key="ButtonNormalVisited.Disabled.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonNormalVisited.Disabled.Foreground"
                     Color="Gray" />
    <SolidColorBrush x:Key="ButtonNormalVisited.Foreground"
                     Color="White" />
    <Style x:Key="ButtonNormalVisited"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource ButtonNormalVisited.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ButtonNormalVisited.Static.Border}" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalVisited.MouseOver.Border}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalVisited.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalVisited.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalVisited.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalVisited.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalVisited.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ButtonNormalVisited.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ButtonMain-->
    <SolidColorBrush x:Key="ButtonMain.Static.Background"
                     Color="#FFF15025" />
    <SolidColorBrush x:Key="ButtonMain.Static.BorderIsDefaulted"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMain.Static.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMain.MouseOver.Background"
                     Color="#FFBB4222" />
    <SolidColorBrush x:Key="ButtonMain.MouseOver.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMain.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonMain.Pressed.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMain.Disabled.Background"
                     Color="#FFECECEC" />
    <SolidColorBrush x:Key="ButtonMain.Disabled.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMain.Disabled.Foreground"
                     Color="Gray" />
    <SolidColorBrush x:Key="ButtonMain.Foreground"
                     Color="White" />
    <Style x:Key="MainButtons"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource ButtonMain.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ButtonMain.Static.Border}" />
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="3" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMain.Static.BorderIsDefaulted}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMain.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMain.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMain.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMain.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMain.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMain.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ButtonMain.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ButtonNormalWhite -->
    <SolidColorBrush x:Key="ButtonNormalWhite.Static.Background"
                     Color="#FFF" />
    <SolidColorBrush x:Key="ButtonNormalWhite.MouseOver.Background"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="ButtonNormalWhite.Static.Border"
                     Color="#FFF" />
    <SolidColorBrush x:Key="ButtonNormalWhite.MouseOver.Border"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="ButtonNormalWhite.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonNormalWhite.Pressed.Border"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonNormalWhite.Disabled.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="ButtonNormalWhite.Disabled.Border"
                     Color="#7F2B3541" />
    <SolidColorBrush x:Key="ButtonNormalWhite.Disabled.Foreground"
                     Color="Gray" />
    <SolidColorBrush x:Key="ButtonNormalWhite.Foreground"
                     Color="White" />
    <Style x:Key="NormalButtonsWhiteVer"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource ButtonNormalWhite.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ButtonNormalWhite.Static.Border}" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalWhite.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalWhite.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalWhite.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalWhite.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalWhite.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonNormalWhite.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="2" />
                            <Setter Property="Cursor"
                                    TargetName="border"
                                    Value="No" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ButtonNormalWhite.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ButtonMainWhite-->
    <SolidColorBrush x:Key="ButtonMainWhite.Static.Background"
                     Color="#FFF15025" />
    <SolidColorBrush x:Key="ButtonMainWhite.Static.BorderIsDefaulted"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMainWhite.Static.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMainWhite.MouseOver.Background"
                     Color="#FFBB4222" />
    <SolidColorBrush x:Key="ButtonMainWhite.MouseOver.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMainWhite.Pressed.Background"
                     Color="#FFFFAD97" />
    <SolidColorBrush x:Key="ButtonMainWhite.Pressed.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMainWhite.Disabled.Background"
                     Color="#FFECECEC" />
    <SolidColorBrush x:Key="ButtonMainWhite.Disabled.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="ButtonMainWhite.Disabled.Foreground"
                     Color="Gray" />
    <SolidColorBrush x:Key="ButtonMainWhite.Foreground"
                     Color="White" />
    <Style x:Key="MainButtonsV2"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{StaticResource ButtonMainWhite.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ButtonMainWhite.Static.Border}" />
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="3" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMainWhite.Static.BorderIsDefaulted}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMainWhite.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMainWhite.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMainWhite.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMainWhite.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMainWhite.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource ButtonMainWhite.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ButtonMainWhite.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region LabelStyle Left-->
    <Style x:Key="LabelLeft"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="3 3" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="5,0,0,5"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="2"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region LabelStyle Up-->
    <Style x:Key="LabelTop"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="3 3" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="5,5,0,0"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="2"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region LabelStyle Right-->
    <Style x:Key="LabelRight"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="3 3" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="0,5,5,0"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="2"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region LabelStyle Bottom-->
    <Style x:Key="LabelBotton"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="3 3" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="0,0,5,5"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="2"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region LabelStyle ALL-->
    <Style x:Key="LabelEveryone"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="3 3" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="5,5,5,5"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="2"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region LableContent-->
    <Style x:Key="LabelStyleContent"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="0,5,5,0"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="2"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true"
                            Margin="-1,0,0,0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region TextBox-->
    <SolidColorBrush x:Key="TextBox.Static.Border"
                     Color="#FFE6E8E6" />
    <SolidColorBrush x:Key="TextBox.MouseOver.Border"
                     Color="#FFD1D1D1" />
    <SolidColorBrush x:Key="TextBox.Focus.Border"
                     Color="#FFFFAD97" />
    <Style x:Key="TextBoxStyleTop"
           TargetType="{x:Type TextBox}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TextBox.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True"
                                Margin="0"
                                Padding="5,3"
                                CornerRadius="5,5,5,5"
                                Focusable="True">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Focusable="false"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"
                                          Padding="10,0" />
                        </Border>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="2"
                                Height="1"
                                Width="auto"
                                Margin="10,18,10,5"
                                HorizontalAlignment="Stretch"
                                SnapsToDevicePixels="True"
                                VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    TargetName="border"
                                    Value="0.56" />
                        </Trigger>-->
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled"
                               Value="true" />
                    <Condition Property="IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush"
                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ListBox-->
    <Style x:Key="ListBoxStyleTransporant"
           TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding"
                Value="2,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="Transparent" />
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    <!--#region ListView-->



    <!--<Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="False">
                                <GridViewHeaderRowPresenter Margin="2,0,2,0" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        </DockPanel>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{TemplateBinding HorizontalOffset}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Width" Value="18"/>
        <Setter Property="Background" Value="{StaticResource CustomBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="GridViewColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource CustomWhite}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <Border Name="HeaderBorder" BorderThickness="0,0,0,0" BorderBrush="{StaticResource CustomWhite}" Background="{StaticResource CustomBackground}" Padding="0,0,0,4">
                            <ContentPresenter Name="HeaderContent" Margin="4,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        -->
    <!-- <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-9,0" Style="{StaticResource GridViewColumnHeaderGripper}"/> -->
    <!--
                    </Grid>                        
                </ControlTemplate>
            </Setter.Value>
        </Setter>            
    </Style>-->

    <!-- ListView template -->


    <!--#endregion-->

    <!--#region Progress bar -->
    <SolidColorBrush x:Key="ProgressBar.Progress"
                     Color="#FFF15025" />
    <SolidColorBrush x:Key="ProgressBar.Background"
                     Color="#FFE6E8E6" />
    <SolidColorBrush x:Key="ProgressBar.Border"
                     Color="#FF2B3541" />
    <SolidColorBrush x:Key="Foreground"
                     Color="Black" />

    <Style x:Key="ProgressBarStyle1"
           TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground"
                Value="{StaticResource ProgressBar.Progress}" />
        <Setter Property="Background"
                Value="{StaticResource ProgressBar.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ProgressBar.Border}" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                                       Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                                  Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2"
                                                                  Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                                                      Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0"
                                                                 Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1"
                                                                 Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2"
                                                                 Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border CornerRadius="10"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track"
                                   RadiusY="10"
                                   RadiusX="10" />
                        <Grid x:Name="PART_Indicator"
                              ClipToBounds="true"
                              HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator"
                                       RadiusY="10"
                                       RadiusX="10"
                                       Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation"
                                       RadiusY="40"
                                       RadiusX="40"
                                       Fill="{TemplateBinding Foreground}"
                                       RenderTransformOrigin="0.10,0.10">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate"
                                 Value="true">
                            <Setter Property="Visibility"
                                    TargetName="Indicator"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProgressBarStyleUp"
           TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground"
                Value="{StaticResource ProgressBar.Progress}" />
        <Setter Property="Background"
                Value="{StaticResource ProgressBar.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ProgressBar.Border}" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                                       Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                                  Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2"
                                                                  Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                                                      Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0"
                                                                 Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1"
                                                                 Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2"
                                                                 Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border CornerRadius="5,5,5,5"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track"
                                   RadiusY="5"
                                   RadiusX="5" />
                        <Grid x:Name="PART_Indicator"
                              ClipToBounds="true"
                              HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator"
                                       RadiusX="5"
                                       RadiusY="5"
                                       Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation"
                                       RadiusY="5"
                                       RadiusX="5"
                                       Fill="{TemplateBinding Foreground}"
                                       RenderTransformOrigin="0.10,0.10">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation"
                                 Value="Vertical">
                            <Setter Property="LayoutTransform"
                                    TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate"
                                 Value="true">
                            <Setter Property="Visibility"
                                    TargetName="Indicator"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProgressBarStyleDown"
           TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground"
                Value="{StaticResource ProgressBar.Progress}" />
        <Setter Property="Background"
                Value="{StaticResource ProgressBar.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ProgressBar.Border}" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="/SelectionCoefficientsBasedValue;component/Style/#Manrope" />
        <Setter Property="FontWeight"
                Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                                       Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                  Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                                  Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2"
                                                                  Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                                                      Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0"
                                                                 Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1"
                                                                 Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2"
                                                                 Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border CornerRadius="5,5,5,5"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track"
                                   RadiusY="5"
                                   RadiusX="5" />
                        <Grid x:Name="PART_Indicator"
                              ClipToBounds="true"
                              HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator"
                                       RadiusY="5"
                                       RadiusX="5"
                                       Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation"
                                       RadiusY="5"
                                       RadiusX="5"
                                       Fill="{TemplateBinding Foreground}"
                                       RenderTransformOrigin="0.10,0.10">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation"
                                 Value="Vertical">
                            <Setter Property="LayoutTransform"
                                    TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate"
                                 Value="true">
                            <Setter Property="Visibility"
                                    TargetName="Indicator"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--#endregion-->

    <!--#region Scrol -->
    <SolidColorBrush x:Key="StandardBorderBrush"
                     Color="#DDD" />
    <SolidColorBrush x:Key="StandardBackgroundBrush"
                     Color="Black" />
    <SolidColorBrush x:Key="HoverBorderBrush"
                     Color="#DDD" />
    <SolidColorBrush x:Key="SelectedBackgroundBrush"
                     Color="Gray" />
    <SolidColorBrush x:Key="SelectedForegroundBrush"
                     Color="White" />
    <SolidColorBrush x:Key="DisabledForegroundBrush"
                     Color="#888" />
    <SolidColorBrush x:Key="GlyphBrush"
                     Color="#444" />
    <SolidColorBrush x:Key="NormalBrush"
                     Color="#888" />
    <SolidColorBrush x:Key="NormalBorderBrush"
                     Color="#BBB" />
    <SolidColorBrush x:Key="HorizontalNormalBrush"
                     Color="#BBB" />
    <SolidColorBrush x:Key="HorizontalNormalBorderBrush"
                     Color="#888" />

    <LinearGradientBrush x:Key="ListBoxBackgroundBrush"
                         StartPoint="0,0"
                         EndPoint="1,0.001">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="White"
                              Offset="0.0" />
                <GradientStop Color="White"
                              Offset="0.6" />
                <GradientStop Color="#DDDDDD"
                              Offset="1.2" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="StandardBrush"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF"
                              Offset="0.0" />
                <GradientStop Color="#CCC"
                              Offset="1.0" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB"
                              Offset="0.0" />
                <GradientStop Color="#EEE"
                              Offset="0.1" />
                <GradientStop Color="#EEE"
                              Offset="0.9" />
                <GradientStop Color="#FFF"
                              Offset="1.0" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ScrollBarLineButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility"
                Value="Hidden" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border"
                            Margin="1"
                            CornerRadius="2"
                            Background="{StaticResource NormalBrush}"
                            BorderBrush="{StaticResource NormalBorderBrush}"
                            BorderThickness="1">
                        <Path HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Fill="{StaticResource GlyphBrush}"
                              Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButton"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility"
                Value="Hidden" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Black" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb"
           TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="4"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"
                            Width="8"
                            Margin="0.5,0,0,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbHor"
           TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="3"
                            Background="#c8c8c8"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"
                            Height="8"
                            Margin="0,0,0,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar"
                     TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="0" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="0" />
            </Grid.RowDefinitions>
            <Border Width="3"
                    Grid.RowSpan="3"
                    CornerRadius="0"
                    Background="#EEE" />
            <RepeatButton Grid.Row="0"
                          Style="{StaticResource ScrollBarLineButton}"
                          Height="18"
                          Command="ScrollBar.LineUpCommand"
                          Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track Name="PART_Track"
                   Grid.Row="1"
                   IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
                           Margin="0,0,0,0"
                           Background="{StaticResource HorizontalNormalBrush}"
                           BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3"
                          Style="{StaticResource ScrollBarLineButton}"
                          Height="18"
                          Command="ScrollBar.LineDownCommand"
                          Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar"
                     TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="0" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="0" />
            </Grid.ColumnDefinitions>
            <Border Height="3"
                    Grid.ColumnSpan="3"
                    CornerRadius="4"
                    Background="#F0F0F0" />
            <RepeatButton Grid.Column="0"
                          Style="{StaticResource ScrollBarLineButton}"
                          Width="18"
                          Command="ScrollBar.LineLeftCommand"
                          Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track Name="PART_Track"
                   Grid.Column="1"
                   IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbHor}"
                           Margin="0,1,0,1"
                           Background="{StaticResource NormalBrush}"
                           BorderBrush="{StaticResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3"
                          Style="{StaticResource ScrollBarLineButton}"
                          Width="18"
                          Command="ScrollBar.LineRightCommand"
                          Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="{x:Type ScrollBar}"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Width"
                        Value="Auto" />
                <Setter Property="Height"
                        Value="10" />
                <Setter Property="Template"
                        Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation"
                     Value="Vertical">
                <Setter Property="Width"
                        Value="10" />
                <Setter Property="Height"
                        Value="Auto" />
                <Setter Property="Template"
                        Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FavsScrollViewer"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="1" />
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Grid.Column="1"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

</ResourceDictionary>
<!--
    <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="Background"
            Value="Transparent" />
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding"
            Value="2,0,0,0" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                <Border x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsSelected"
                             Value="true">
                        <Setter Property="Background"
                                TargetName="Bd"
                                Value="Transparent" />
                        <Setter Property="Foreground"
                                Value="Black" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected"
                                       Value="true" />
                            <Condition Property="Selector.IsSelectionActive"
                                       Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                        <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                    </MultiTrigger>
                    <Trigger Property="IsEnabled"
                             Value="false">
                        <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    </Style> -->